app:
  eureka:
    address: localhost
    port: 8010
  assistencia-catalogo:
    address: localhost
    port: 8052
    name: assistencia-catalogo

db.schema: assistencia_es

server:
  port: ${app.assistencia-catalogo.port}

spring:
  task.execution.pool.core-size: 8
  jackson:
    default-property-inclusion: NON_NULL
#  kafka:
#    producer:
#      properties:
#        '[max.in.flight.requests.per.connection]': 1
  application:
    name: ${app.assistencia-catalogo.name}
  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/experimenter_db}
    username: ${DB_USER:experimenter_db_admin}
    password: ${DB_PASSWORD:12345}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximumPoolSize: 5
      minimumIdle: 1
  jpa:
    open-in-view: false
    hibernate.ddl-auto: validate
    show-sql: true
#  flyway.clean-disabled: false
#  flyway.schemas: assistencia_es
#  flyway.default-schema: assistencia_es
#  flyway.table: flyway_schema_catalogo_history
  web:
    resources:
      add-mappings: false
  rabbitmq:
    host: localhost
    port: 5672
    username: admin
    password: 123456
    assistencia-catalogo:
      servico:  # Domain Aggregate
        exchange: comigo.assistencia-catalogo.servico
        commands:
          disponibilizar:
            queue: comigo.assistencia-catalogo.servico.command.disponibilizar
            queue-dlq: comigo.assistencia-catalogo.servico.command.disponibilizar.dlq
            routing-key: command.disponibilizar
        events:
          view-update:
            queue: comigo.assistencia-catalogo.servico.event.view-update
            queue-dlq: comigo.assistencia-catalogo.servico.event.view-update.dlq
            routing-key: event.view-update

endpoints:
  shutdown:
    enabled: false

management:
  endpoint:
    health:
      show-details: always
    shutdown:
      access: read-only
  endpoints:
    web:
      exposure:
        include: '*'

event-sourcing:
  snapshotting:
    # com.example.eventsourcing.domain.AggregateType
    CATALOGO:
      enabled: false
      # Create a snapshot on every nth event
      nth-event: 10
  # Available subscription: polling, postgres-channel
  subscriptions: postgres-channel
  polling-subscriptions:
    polling-initial-delay: PT1S
    polling-interval: PT1S
    batch-size: 1000

logging:
  level:
    '[com.zaxxer.hikari.pool.HikariPool]': INFO
    '[org.springframework]': ERROR
    '[org.hibernate]':
      SQL: ERROR
      '[type.descriptor.sql.BasicBinder]': ERROR
  pattern:
    console: "%clr(%d{HH:mm:ss}){faint} %clr(%5p) %clr(${PID}){magenta} %clr(:){faint} %clr(%-40.40logger{39}){cyan}%clr(.%M:%L){yellow} %clr(:){faint} %m%n"

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    service-url.defaultZone: http://${app.eureka.address}:${app.eureka.port}/eureka
    healthcheck.enabled: true

exception:
  handle:
    stackTrace: print
