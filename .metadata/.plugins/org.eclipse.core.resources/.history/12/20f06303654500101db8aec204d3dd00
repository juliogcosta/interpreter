package com.yc.core.cqrs.domain.command;

import java.util.Iterator;
import java.util.Map;
import java.util.UUID;

import com.fasterxml.jackson.databind.JsonNode;

public class Command {

    protected final UUID aggregateId;
    protected final JsonNode commandData;
    protected final JsonNode commandModel;

    public Command(JsonNode aggregate, JsonNode commandModel) {
		this.aggregateId = UUID.fromString(aggregate.asText("id"));
		this.validateDataAgainstModel(aggregate.get("data"), commandModel);
		this.commandModel = commandModel;
		this.commandData = aggregate.get("data");
	}
    
    private void validateDataAgainstModel(JsonNode data, JsonNode commandModel) {
        Iterator<Map.Entry<String, JsonNode>> fields = commandModel.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> field = fields.next();
            String attributeName = field.getKey();
            JsonNode attributeSpec = field.getValue();
            String attributeType = attributeSpec.has("type") ? attributeSpec.get("type").asText() : null;
            JsonNode attributeValue = data.get(attributeName);

            if (attributeSpec.get("nullable").asBoolean()) {
                
            } else if (data.has(attributeName)) {
            	if (data.get(attributeName).isNull()) {
            		throw new IllegalArgumentException("Campo obrigatório ausente ou nulo: " + attributeName); 
                } 
            } else throw new IllegalArgumentException("Campo obrigatório ausente ou nulo: " + attributeName); 
            
            if (String.class.getSimpleName().equalsIgnoreCase(attributeType)) {
                if (attributeValue != null && !attributeValue.isNull()) {
                    int attributeValueMaxLength = attributeSpec.has("length") ? attributeSpec.get("length").asInt() : -1;
                    String value = attributeValue.asText();
                    if (attributeValueMaxLength > 0 && value.length() > attributeValueMaxLength) {
                        throw new IllegalArgumentException("Campo '" + attributeName + "' excede o tamanho máximo de " + attributeValueMaxLength + " caracteres.");
                    }
                }
            }
        }
    }

    final public String getAggregateType() {
    	return this.commandData.asText("type");
    }

    final public UUID getAggregateId() {
		return aggregateId;
	}
    
    final public JsonNode getAggregateData() {
		return commandData;
	}
    
    final public JsonNode getAggregateModel() {
    	return this.commandModel;
    }
}
